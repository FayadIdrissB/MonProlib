const User = require('../models/user');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');

// üü¢ Fonction pour v√©rifier l'existence du t√©l√©phone
const checkPhone = async (req, res) => {
    try {
        const { telephone } = req.params;
        const existingUser = await User.findOne({ telephone });

        if (existingUser) {
            return res.json({ exists: true });
        } else {
            return res.json({ exists: false });
        }
    } catch (error) {
        console.error('Erreur lors de la v√©rification du t√©l√©phone :', error);
        res.status(500).json({ error: 'Erreur serveur' });
    }
};

// üü¢ Fonction pour v√©rifier l'existence du SIRET
const checkSiret = async (req, res) => {
    try {
        const { siret } = req.params;
        const existingUser = await User.findOne({ siret });

        if (existingUser) {
            return res.json({ exists: true });
        } else {
            return res.json({ exists: false });
        }
    } catch (error) {
        console.error('Erreur lors de la v√©rification du SIRET :', error);
        res.status(500).json({ error: 'Erreur serveur' });
    }
};

// üü¢ Fonction d'inscription
const register = async (req, res) => {
    try {
        const { nom, prenom, email, password, telephone, siret } = req.body;

        // üü¢ V√©rifier l'existence de l'email
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ error: 'Cet email est d√©j√† utilis√©' });
        }

        // üü¢ V√©rifier l'existence du t√©l√©phone
        const existingPhone = await User.findOne({ telephone });
        if (existingPhone) {
            return res.status(400).json({ error: 'Ce num√©ro de t√©l√©phone est d√©j√† utilis√©' });
        }

        // üü¢ V√©rifier l'existence du SIRET
        if (siret) {
            const existingSiret = await User.findOne({ siret });
            if (existingSiret) {
                return res.status(400).json({ error: 'Ce num√©ro de SIRET est d√©j√† utilis√©' });
            }
        }

        const role = siret ? 'pro' : 'user';
        const hashedPassword = await bcrypt.hash(password, 10); // üü¢ Hash du mot de passe

        const user = new User({ nom, prenom, email, password: hashedPassword, telephone, role, siret: siret || null });
        await user.save();

        res.status(201).json({ message: `Compte ${role} cr√©√© avec succ√®s`, role });
    } catch (error) {
        console.error('Erreur lors de l\'inscription :', error);

        // üü¢ G√©rer les erreurs de duplication (email, t√©l√©phone, SIRET)
        if (error.code === 11000) {
            const field = Object.keys(error.keyValue)[0];
            const message = field === 'email' ? 'Cet email est d√©j√† utilis√©' :
                            field === 'telephone' ? 'Ce num√©ro de t√©l√©phone est d√©j√† utilis√©' :
                            field === 'siret' ? 'Ce num√©ro de SIRET est d√©j√† utilis√©' :
                            'Un champ unique est d√©j√† utilis√©';

            return res.status(400).json({ error: message });
        }

        res.status(500).json({ error: 'Erreur serveur' });
    }
};

// üü¢ Fonction de connexion
const login = async (req, res) => {
    try {
        const { email, password } = req.body;
        const user = await User.findOne({ email });

        if (!user) {
            return res.status(400).json({ error: 'Email ou mot de passe incorrect' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ error: 'Email ou mot de passe incorrect' });
        }

        const token = jwt.sign({ userId: user._id, role: user.role }, 'SECRET_KEY', { expiresIn: '1h' });

        res.json({ 
            message: 'Connexion r√©ussie', 
            token, 
            role: user.role, 
            userId: user._id, 
            prenom: user.prenom
        });
    } catch (error) {
        console.error('Erreur lors de la connexion :', error);
        res.status(500).json({ error: 'Erreur serveur' });
    }
};

// üü¢ Fonction pour obtenir un utilisateur par ID
const getUserById = async (req, res) => {
    try {
        const user = await User.findById(req.params.id).select('-password'); // Exclure le mot de passe pour la s√©curit√©

        if (!user) {
            return res.status(404).json({ error: 'Utilisateur non trouv√©' });
        }

        res.json(user);
    } catch (error) {
        console.error('Erreur lors de la r√©cup√©ration de l\'utilisateur :', error);
        res.status(500).json({ error: 'Erreur serveur' });
    }
};

// üü¢ Export des fonctions
module.exports = {
    checkPhone,
    checkSiret,
    register,
    login,
    getUserById
};